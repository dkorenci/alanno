# Generated by Django 3.2.7 on 2021-10-28 16:19

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.CharField(blank=True, max_length=100, null=True)),
                ('text', models.TextField()),
                ('raw_html', models.TextField(blank=True, null=True)),
                ('html_mapping', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), blank=True, null=True, size=None)),
                ('is_selected', models.BooleanField(default=False, null=True)),
                ('is_test', models.BooleanField(default=False, null=True)),
                ('is_al', models.BooleanField(default=False, null=True)),
                ('is_warm_start', models.BooleanField(default=False, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lemmas', django.contrib.postgres.fields.ArrayField(base_field=picklefield.fields.PickledObjectField(editable=False, null=True), blank=True, null=True, size=None)),
                ('completed_by', models.ManyToManyField(related_name='completed_docs', to=settings.AUTH_USER_MODEL)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_server.document_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(max_length=500)),
                ('guidelines', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project_type', models.CharField(choices=[('Classification', 'Classification'), ('Keyphrase Extraction', 'Keyphrase Extraction')], max_length=30)),
                ('al_mode', models.BooleanField(blank=True, null=True)),
                ('al_method', models.CharField(choices=[('margin', 'Margin'), ('entropy', 'Entropy'), ('inf_div', 'Informative diverse')], max_length=30, null=True)),
                ('model_name', models.CharField(choices=[('log_reg', 'Logistic regression'), ('svm', 'SVM'), ('kernel_svm', 'Kernel SVM'), ('svm_prob', 'Probabilistic SVM'), ('rfc', 'Random forest classifier')], max_length=30, null=True)),
                ('vectorizer_name', models.CharField(blank=True, choices=[('count', 'Count'), ('tf_idf', 'TF-IDF'), ('vec_avg', 'Average word vector')], max_length=30, null=True)),
                ('token_type', models.CharField(blank=True, choices=[('words', 'Words'), ('chars', 'Characters')], max_length=30, null=True)),
                ('min_ngram', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('max_ngram', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('adjustable_vocab', models.BooleanField(blank=True, null=True)),
                ('vocab_max_size', models.PositiveIntegerField(blank=True, null=True)),
                ('vocab_min_freq', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('multilabel', models.BooleanField(blank=True, null=True)),
                ('hierarchy', models.BooleanField(blank=True, null=True)),
                ('language', models.CharField(choices=[('en', 'English'), ('hr', 'Croatian')], max_length=10, null=True)),
                ('image_url', models.CharField(blank=True, max_length=50, null=True)),
                ('access_code', models.CharField(blank=True, max_length=32, null=True)),
                ('annotators', models.ManyToManyField(related_name='annotator_in_projects', to=settings.AUTH_USER_MODEL)),
                ('managers', models.ManyToManyField(related_name='manager_in_projects', to=settings.AUTH_USER_MODEL)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_server.project_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='ClassificationDocument',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.document')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.document',),
        ),
        migrations.CreateModel(
            name='ClassificationProject',
            fields=[
                ('project_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.project')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.project',),
        ),
        migrations.CreateModel(
            name='KexDocument',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.document')),
            ],
            options={
                'permissions': [('can_upload_html', 'Can upload HTML documents.')],
            },
            bases=('server.document',),
        ),
        migrations.CreateModel(
            name='KexProject',
            fields=[
                ('project_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.project')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.project',),
        ),
        migrations.CreateModel(
            name='Seq2seqDocument',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.document')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.document',),
        ),
        migrations.CreateModel(
            name='Seq2seqProject',
            fields=[
                ('project_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.project')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.project',),
        ),
        migrations.CreateModel(
            name='SeqLabelingProject',
            fields=[
                ('project_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.project')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.project',),
        ),
        migrations.CreateModel(
            name='SequenceDocument',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='server.document')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('server.document',),
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rounds', to='server.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stats', picklefield.fields.PickledObjectField(editable=False, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='server.project')),
            ],
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100)),
                ('shortcut', models.CharField(blank=True, choices=[('a', 'a'), ('b', 'b'), ('c', 'c'), ('d', 'd'), ('e', 'e'), ('f', 'f'), ('g', 'g'), ('h', 'h'), ('i', 'i'), ('j', 'j'), ('k', 'k'), ('l', 'l'), ('m', 'm'), ('n', 'n'), ('o', 'o'), ('p', 'p'), ('q', 'q'), ('r', 'r'), ('s', 's'), ('t', 't'), ('u', 'u'), ('v', 'v'), ('w', 'w'), ('x', 'x'), ('y', 'y'), ('z', 'z')], max_length=10, null=True)),
                ('background_color', models.CharField(default='#ffffff', max_length=7)),
                ('alt_color', models.CharField(blank=True, default='#ffffff', max_length=7, null=True)),
                ('text_color', models.CharField(default='#ffffff', max_length=7)),
                ('is_leaf', models.BooleanField(blank=True, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='server.label')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='server.project')),
            ],
            options={
                'unique_together': {('project', 'text')},
            },
        ),
        migrations.AddField(
            model_name='document',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='server.project'),
        ),
        migrations.AddField(
            model_name='document',
            name='round',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='server.round'),
        ),
        migrations.AddField(
            model_name='document',
            name='selectors',
            field=models.ManyToManyField(related_name='selected_docs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SequenceAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_offset', models.IntegerField()),
                ('end_offset', models.IntegerField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seq_annotations', to='server.document')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.label')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('document', 'user', 'label', 'start_offset', 'end_offset')},
            },
        ),
        migrations.CreateModel(
            name='Seq2seqAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seq2seq_annotations', to='server.document')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('document', 'user', 'label')},
            },
        ),
        migrations.CreateModel(
            name='KexAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_offset', models.IntegerField()),
                ('end_offset', models.IntegerField()),
                ('phrase', models.TextField()),
                ('lemma', models.TextField(blank=True, null=True)),
                ('original_label', models.BooleanField(default=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kex_annotations', to='server.document')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.label')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('document', 'user', 'label', 'start_offset', 'end_offset')},
            },
        ),
        migrations.CreateModel(
            name='ExportData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('format', models.CharField(choices=[('csv', 'csv'), ('json', 'json')], max_length=4, null=True)),
                ('is_aggregated', models.BooleanField(default=None, null=True)),
                ('is_unlabeled', models.BooleanField(default=None, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='export', to='server.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='export', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'project')},
            },
        ),
        migrations.CreateModel(
            name='DocumentAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doc_annotations', to='server.document')),
                ('label', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.label')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('document', 'user', 'label')},
            },
        ),
    ]
